#!/bin/bash
# changeVolume

# Arbitrary but unique message tag
msg_tag="computer_volume"

# Specify the increment or decrement amount (you can adjust this as needed)
increment_amount=5

# Get the current volume and whether or not the speaker is muted
current_volume=$(pamixer --get-volume)
is_muted=$(pamixer --get-mute)

# Check if the first argument is provided and is either "up" or "down"
if [[ -n "$1" && ( "$1" == "up" || "$1" == "down" || "$1"  == "mute" ) ]]; then
    if [ "$1" == "up" ]; then
        # Increment the volume
        pamixer --increase $increment_amount
    elif [ "$1" == "down" ]; then
        # Decrement the volume
        pamixer --decrease $increment_amount
    elif [ "$1" == "mute" ]; then
        if [ "$is_muted" == "false" ]; then
            pamixer --mute
            is_muted="true"
        elif [ "$is_muted" == "true" ]; then
            pamixer --unmute
            is_muted="false"
        fi
    fi
fi

# Get the updated volume after incrementing or decrementing
updated_volume=$(pamixer --get-volume)

# Get audio device type
device_type=$(pactl list sinks | grep "Active Port:" | grep -v "HDMI" | awk -F'\\[Out\\] ' '{print $2}')
if [ -n "$device_type" ]; then
  audio_device=$device_type
else
  audio_device="Unknown"
fi

if [[ $updated_volume == 0 || "$is_muted" == "true" ]]; then
    # Show the sound muted notification
    dunstify -a $audio_device -u low -i audio-volume-muted -h string:x-dunst-stack-tag:$msg_tag "Volume muted"
else
    # Show the volume notification
    dunstify -a $audio_device -u low -i audio-volume-high -h string:x-dunst-stack-tag:$msg_tag \
    -h int:value:"$updated_volume" "Volume: ${updated_volume}%"
fi
